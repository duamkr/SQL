SELECT TABLE_NAME FROM USER_TABLES;

SELECT  * FROM STUDENT ;
SELECT  * FROM ENROL;

--# CORSS JOIN
SELECT STUDENT.*, ENROL.* FROM STUDENT CROSS JOIN ENROL;

DESC STUDENT;
DESC ENROL;

--# EQUL JOIN
SELECT STUDENT.STU_NO, STU_NAME, STU_DEPT, ENR_GRADE FROM STUDENT, ENROL WHERE STUDENT.STU_NO = ENROL.STU_NO;

--# NATURAL JOIN , 자연적으로 조인됨(벋 2개이상의 공통 분모가 존재시, 불가능)
SELECT STU_NO, STU_NAME, STU_DEPT, ENR_GRADE FROM STUDENT NATURAL JOIN ENROL;
--# 2개 이상 공통분모 존재시 JOIN~USING절 이용
SELECT STU_NO, STU_NAME, STU_DEPT, ENR_GRADE FROM STUDENT JOIN ENROL USING(STU_NO);

--# 2개 이상 공통분모 존재시 JOIN~ON절 이용
SELECT STUDENT.STU_NO, STU_NAME, STU_DEPT, ENR_GRADE FROM STUDENT JOIN ENROL ON STUDENT.STU_NO = ENROL.STU_NO;

--# NATURAL JOIN 에 AND절 추가로 추가조건 부여 
SELECT STUDENT.STU_NO, STU_NAME FROM STUDENT, ENROL WHERE STUDENT.STU_NO=ENROL.STU_NO AND SUB_NO =101;

--# 논리연산자가 AND, OR 두개 일경우 ()를 사용하지 않으면 논리연산자 오류가 발생함으로 OR절은 ()사용
SELECT STUDENT.STU_NO, STU_NAME FROM STUDENT, ENROL WHERE STUDENT.STU_NO = ENROL.STU_NO AND (SUB_NO = 101 OR SUB_NO = 102);


--# STUDETN - SUBJECT의 JOIN을 위해 중간에 ENROL을 거쳐서 JOIN 
SELECT STUDENT.STU_NO, STU_NAME,SUB_NAME FROM STUDENT, ENROL, SUBJECT WHERE STUDENT.STU_NO = ENROL.STU_NO AND ENROL.SUB_NO = SUBJECT.SUB_NO 
AND SUB_NAME = '컴퓨터개론';

SELECT STU_NO, STU_NAME, SUB_NAME FROM STUDENT NATURAL JOIN ENROL NATURAL JOIN SUBJECT WHERE SUB_NAME = '컴퓨터개론';

SELECT STU_NO, STU_NAME, SUB_NAME FROM STUDENT JOIN ENROL USING(STU_NO) JOIN SUBJECT USING(SUB_NO) WHERE SUB_NAME = '컴퓨터개론';

SELECT ENROL.STU_NO, STU_NAME, SUB_NAME FROM STUDENT JOIN ENROL ON STUDENT.STU_NO=ENROL.STU_NO JOIN SUBJECT ON ENROL.SUB_NO = SUBJECT.SUB_NO
WHERE SUB_NAME = '컴퓨터개론';


--# NO EQUL JOIN
SELECT * FROM SALGRADE;
SELECT * FROM EMP;

SELECT EMPNO, ENAME, SAL, GRADE FROM EMP, SALGRADE WHERE SAL BETWEEN LOSAL AND HISAL;

--# SELF JOIN 
SELECT * FROM EMP;

SELECT A.EMPNO AS 사원번호, A.ENAME AS 사원이름, B.EMPNO AS 상급자사원번호, B.ENAME AS 상급자이름
FROM EMP A, EMP B WHERE A.MGR= B.EMPNO;

--# OUTER JOIN 
SELECT A.* , SUB_NAME FROM ENROL A, SUBJECT B WHERE A.SUB_NO = B.SUB_NO ORDER BY 1;

--# SUB QURERY 
--# 옥성우의 키보다 큰 학생의 정보, 옥성우의 키를 조회
SELECT STU_NO, STU_NAME, STU_HEIGHT FROM STUDENT WHERE STU_NAME='옥성우';
--# 옥성우의 키인 172보다 키가 큰놈 조회
SELECT STU_NO, STU_NAME, STU_HEIGHT FROM STUDENT WHERE STU_HEIGHT > 172;

--# 위 두개의 쿼리를 하나로 합친 해결문
SELECT STU_NO, STU_NAME, STU_HEIGHT FROM STUDENT WHERE STU_HEIGHT > (SELECT STU_HEIGHT FROM STUDENT WHERE STU_NAME = '옥성우');

--# SELF JOIN 을 이용해 합친 것
SELECT A.STU_NO, A.STU_NAME, A.STU_HEIGHT FROM STUDENT A, STUDENT B WHERE A.STU_HEIGHT > B.STU_HEIGHT AND B.STU_NAME ='옥성우';

--# 단일열 부질의 / 박희철과 같은 몸무게 조회
SELECT * FROM STUDENT WHERE STU_WEIGHT = (SELECT STU_WEIGHT FROM STUDENT WHERE STU_NAME = '박희철');
--# 박희철은 제외하고 박희철과 같은 몸무게 조회
SELECT * FROM STUDENT WHERE STU_WEIGHT = (SELECT STU_WEIGHT FROM STUDENT WHERE STU_NAME = '박희철') AND STU_NAME <> '박희철';

--# STUDENT TABLE에서 컴퓨터정보 학과아 같은반인 다른학과 학생정보 조회
SELECT * FROM STUDENT;
SELECT * FROM STUDENT WHERE STU_CLASS IN (SELECT STU_CLASS FROM STUDENT WHERE STU_DEPT = '컴퓨터정보') AND STU_DEPT <> '컴퓨터정보';

--# 신장이 전체학생들의 평균 신장보다 큰 학생을 구하는 질의문 
SELECT * FROM STUDENT WHERE STU_HEIGHT > (SELECT AVG(STU_HEIGHT) FROM STUDENT);

--# 신장이 모든 학과들의 평균 신장보다 큰 학생 정보(GROUP BY 로 학과별 평균키 지정)
SELECT * FROM STUDENT WHERE STU_HEIGHT > ALL(SELECT AVG(STU_HEIGHT) FROM STUDENT GROUP BY STU_DEPT);

SELECT STU_NO, STU_NAME, A.STU_DEPT, STU_HEIGHT, AVG_HEIGHT FROM STUDENT A, (SELECT STU_DEPT, ROUND(AVG(STU_HEIGHT),2) AS AVG_HEIGHT 
FROM STUDENT GROUP BY STU_DEPT) B WHERE A.STU_DEPT = B.STU_DEPT AND STU_HEIGHT > AVG_HEIGHT;

--# 집합(SET)연산자 
--# 

CREATE TABLE A_STUDENT AS SELECT * FROM STUDENT WHERE STU_DEPT IN ('기계','전기전자');

CREATE TABLE B_STUDENT AS SELECT * FROM STUDENT WHERE STU_DEPT IN ('전기전자','컴퓨터정보');

SELECT * FROM A_STUDENT;
SELECT * FROM B_STUDENT;

--# UNION (중복된 항목 제거 후 조회)
SELECT * FROM A_STUDENT UNION SELECT * FROM B_STUDENT;
--# UNOIN ALL(중복 항목 제거 안한 후 조회)
SELECT * FROM A_STUDENT UNION ALL SELECT * FROM B_STUDENT;

--# INTERSECT (중복된 항목 조회)
SELECT * FROM A_STUDENT INTERSECT SELECT * FROM B_STUDENT;

--# MINUS (첫번째 결과집합, 두번째 집합의 교집합을 제외한 결과?)
SELECT * FROM A_STUDENT MINUS SELECT * FROM B_STUDENT;


--DML / TCL

--# 단일 튜플 삽입(테이블 생성)
CREATE TABLE A_ENROL AS SELECT * FROM ENROL WHERE STU_NO < 20150000;

SELECT * FROM A_ENROL;
DESC A_ENROL;

--# 데이터 추가 (김인중 108번 소프트웨어 공학 수강 92점 데이터 입력)
INSERT INTO A_ENROL(SUB_NO, STU_NO, ENR_GRADE) VALUES(108, 20151062, 92);

--# 컬럼명을 생략하고 입력이 가능
INSERT INTO A_ENROL VALUES(109, 20152088, 85);

--# 값을 모르는경우 입력하지 않으면 (컬럼명, 값) NULL값으로 입력됨
INSERT INTO A_ENROL(SUB_NO, STU_NO) VALUES(110, 20152088);
--# 컬럼명을 입력하지 않는경우는 NULL이라고 표시
INSERT INTO A_ENROL VALUES (111, 20153075, NULL);

--# 복수 행 삽입
SELECT * FROM A_ENROL;

SELECT * FROM ENROL WHERE STU_NO LIKE '2015%';

--# 학번에 2015가 포함되는 애들을 전부 추가
INSERT INTO A_ENROL SELECT * FROM ENROL WHERE STU_NO LIKE '2015%';


--# UPDATE 

--# 기본 UPDATE
UPDATE A_ENROL SET ENR_GRADE = ENR_GRADE + 5;
SELECT * FROM A_ENROL;

--# 조건 +UPDATE
UPDATE A_ENROL SET ENR_GRADE = ENR_GRADE +5 WHERE SUB_NO = 101;
SELECT * FROM A_ENROL;
SELECT * FROM SUBJECT;
--# 부질의를 갖는 UPDATE
UPDATE A_ENROL SET ENR_GRADE = ENR_GRADE + 10 WHERE SUB_NO = (SELECT SUB_NO FROM SUBJECT WHERE SUB_NAME = '시스템분석설계');


--# DELETE 

--# 특정 튜플 삭제
DELETE FROM A_ENROL WHERE STU_NO = 20131001;
SELECT * FROM A_ENROL;

--# 부질의를 갖는 DELETE문
DELETE A_ENROL WHERE SUB_NO = (SELECT SUB_NO FROM SUBJECT WHERE SUB_NAME = '기계요소설계');

--# 다중 튜플 삭제
DELETE FROM A_ENROL;


--# MERGE 

